# Stereo Disparity (assignment 4) notes

# Methods

* ReadImage - Use lodepng.cpp/lodepng.c, lodepng.h libraries to read the input images
  in RGBA format
* ResizeImage - Write your custom C/C++ function to downscale the read input RGBA
  images by 4
* GrayScaleImage - Write your custom C/C++ function to convert images to gray scale.
  Save the Gray Scale Images as well and submit them along with the report
* CalcZNCC - Write your custom C/C++ functions to compute the ZNCC value for pixels
  as described in the previous section. Save the output image after applying ZNCC and
  submit it along with the report
* CrossCheck - Write your custom C/C++ function to applying this post processing
  functionality. The description regarding this is mentioned under previous section.
  Save the output image after applying CrossCheck post processing and submit it along
  with the report
* OcclusionFill - Write your custom C/C++ function to apply the second post processing
  functionality. The description regarding this is provided under previous section as well.
  Save the final output image after applying OcclusionFill post processing and submit it
  along with the report
* WriteImage - Use lodepng.cpp/lodepng.c libraries to save the output images at
  different times of the implementation. Remember to not comment this functionalty
  while measuring the timing/profiling information of otherfunctions present under this
  task
* ProfilingInfo - Provide profiling information on each of these functionalities. You are
  free to choose to implement this part. Simplest profiling information is the timing
  information of each of these functionalities. Do observe the time, CPU consumes for
  each one of them. You can include any analysis on this in your report.

# Overview

leftImg = load(im0)
rightImg = load(im1)

leftImg = leftImg.resize()
rightImg = rightImg.resize()

leftImg = leftImg.grayscale()
rightImg = rightImg.grayscale()
leftImg.save(1-gray-l)
rightImg.save(1-gray-r)

leftDispImg = leftImg.calcZNCC(rightImg)
rightDispImg = rightImg.calcZNCC(rightImg)
del leftImg, rightImg
leftDispImg.save(2-disp-l)
rightDispImg.save(2-disp-r)

finalImg = leftDispImg.crossCheck(rightImg)
finalImg.save(3-cross-checked)

finalImg = finalImg.occlusionFill()
finalImg.save(4-occlusion-filled)


# Algorithm

Let there be a Rect class that represents a rectangle:
    Rect(topLeft, bottomRight);
        topLeft     = (x1, y1)
        bottomRight = (x2, y2)
        center      = (cx, cy) = ((x1 + x2) / 2, (y1 + y2) / 2)

Let there be a ZNCC class (or method):
    ZNCC:
        initialize(image_left, image_right):
            this->image_left = image_left
            this->image_right = image_right
            this->avg_left = this->calcAverage(this->image_left)  // window or image average???
            this->avg_right = this->calcAverage(this->image_right)
        calculate(x, y, d):
            return ...

Basic idea (to my understanding):
1. Pick a patch (some smallish square) from left image:
    patchLeft = Rect((200,100), (300,200)) --> B = 100
2. Pick the same patch from the right image:
    patchRight = Rect((200,100), (300,200))
3. Measure maximum ZNCC (maximum cross-correlation):
    ZNCC = ZNCC.initialize(image_left, image_right)

    d_limit = 200                           // test this area to the left
    dx = 1                                  // move 1 pixel at a time
    d = 0                                   // start from the left patch position (disparity)

    max_correlation = 0.0
    d_optimal = 0                           // d which had the best (largest) correlation

    while d <= d_max:                       // repeat until a limit is reached
        correlation = ZNCC.calculate(patchRight.x, patchRight.y, d)
        if (correlation > max_correlation)  // new optimum found
            max_correlation = correlation
            d_optimal = d

        d += dx                             // move patch to the left


# Disparity parameters

By measuring the closest point (the upper right corner of the tray),
I got a distance (disparity) of:
    213 => maxSearchDist = 215
    Downscaled: maxSearchDist = 55

First i'll try window size of 20:
    windowSize = 20
